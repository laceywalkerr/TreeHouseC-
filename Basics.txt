1. How is C# different from C?
You would always know C being the procedural language while C# is a more object-oriented language. 
The biggest difference is that C# supports automatic garbage collection by Common Language Runtime (CLR) while C does not. 
C# primarily needs a .NET framework to execute while C is a platform-agnostic language. 

2. What is Common Language Runtime (CLR)?
CLR handles program execution for various languages including C#. 
The architecture of CLR handles memory management, garbage collection, security handling. 

3. What is garbage collection in C#?
Garbage collection is the process of freeing up memory that is captured by unwanted objects. When you create a class object, automatically some memory space is allocated to the object in the heap memory. Now, after you perform all the actions on the object, the memory space occupied by the object becomes waste. It is necessary to free up memory. Garbage collection happens in three cases:

If the occupied memory by the objects exceeds the pre-set threshold value.
If the garbage collection method is called
If your system has low physical memory

4. What are the types of classes in C#?
Class is an entity that encapsulates all the properties of its objects and instances as a single unit. C# has four types of such classes:

Static class: Static class, defined by the keyword ‘static’ does not allow inheritance. Therefore, you cannot create an object for a static class.
Sample code:

static class classname  
{  
  //static data members  
  //static methods  
}
Partial class: Partial class, defined by the keyword ‘partial’ allows its members to partially divide or share source (.cs) files.
Abstract class: Abstract classes are classes that cannot be instantiated where you cannot create objects. Abstract classes work on the OOPS concept of abstraction. Abstraction helps to extract essential details and hide the unessential ones.
Sealed class: Sealed classes are classes that cannot be inherited. Use the keyword sealed to restrict access to users to inherit that class. 
 
sealed class InterviewBit
{
   // data members
   // methods
   .
   .
   .
}


5. What is a managed and unmanaged code?
Managed code lets you run the code on a managed CLR runtime environment in the .NET framework. 
Managed code runs on the managed runtime environment than the operating system itself. 
Benefits: Provides various services like a garbage collector, exception handling, etc. 

Unmanaged code is when the code doesn’t run on CLR, it is an unmanaged code that works outside the .NET framework. 
They don’t provide services of the high-level languages and therefore, run without them. Such an example is C++. 